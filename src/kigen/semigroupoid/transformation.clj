(ns kigen.semigroupoid.transformation
  "Transformation semigroupoids.
   :s - source, domain
   :t - target, codomain
   :m - morphism, map"
  (:require [clojure.set :refer [union]]
            [orbit.core :refer [full-orbit]]))

(declare compose
         sgpoid-by-gens)


(defn compose
  "Composition of typed transformations.
   Given a nd b, the arrow a then b is returned. Note the automata
   theoretic composition.
   Returns nil when the arrows a and b are not composable."
  [a b]
  (when (= (:t a) (:s b)) ;checking composability
    {:s (:s a) ;the source is the source of a
     :t (:t b) ;the target is the target of b
     :m (mapv (:m b) (:m a))})) ; clj vectors are functions!

(defn sgpoid-by-gens
  "Returns the elements of the semigroupoid generated by the typed
   transformations given in gens."
  [gens]
  (let [sources (group-by :s gens) ;looks up generators with given source
        targets (group-by :t gens) ;looks up generatos with given target
        generator-fn ;takes an arrow and prepend/append all matching gens
        (fn [a]
          (union
           (set (map (partial compose a) ;append generator
                     (sources (:t a)))) ;nil is ok for map
           (set (map #(compose % a) ;prepend generator
                     (targets (:s a))))))]
    (full-orbit gens generator-fn)))

(defn morphisms-by-type
  "Returns a hash-map with  keys as types, i.e., [dom,codomain] pairs, and values as the set of all arrows of that type."
  [S]
  (update-vals
   (group-by (fn [a] [(:s a) (:t a)]) S)
   (comp set ;TODO do we need set? transformations of same type form a set
         (partial map :m)))) ;stripping off the type information