(ns kigen.sgp
  "General functions for semigroups. Black box style, the elements
  and the operation need to be supplied."
  (:require [clojure.math.combinatorics :as combinatorics]
            [kigen.pos :as pos]
            [orbit.core :refer [full-orbit]]
            [orbit.action :refer [right-actions set-action]]))

(declare sgp-by-gens
         commutative?
         index-period)

(defn sgp-by-gens
  "Computes all elements of a semigroup generated by gens combined by the
  given binary operation mul."
  [gens mul]
  (full-orbit gens (set-action (right-actions mul gens))))

(defn commutative?
  "Brute-force checking of commutativity of a semigroup."
  [sgp mul]
  (every? (fn [[x y]] (= (mul x y) (mul y x)))
          (combinatorics/combinations sgp 2)))

(defn index-period
  "The index-period pair of integers in a vector."
  [x mul]
  (letfn [(f [v] (conj v (mul (peek v) x)))]
    (let [orbit (first (drop-while
                        #(apply distinct? %)
                        (iterate f [x])))
          repeated (peek orbit)
          index  (inc (pos/position #(= repeated %) orbit))
          period (- (count orbit) index)]
      [index period])))
