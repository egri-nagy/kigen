(ns kigen.holonomy
  (:use [kigen.orbit :as o]
        [kigen.transf :as t]
        [kigen.poset :as p]
        [clojure.set :as set]))

;;finite sets represented as 1..n
(defn finite-set
  "Returns the integers 1..n, the canonical representation of finite sets."
  [n] (set (range 1 (inc n))))

(defn subduction-function
  "Returns a function for deciding the subduction relation of finite sets
  based on the given transformation right actions."
  [as]
  (fn [P Q]
    (or (set/subset? P Q)
        (not-empty (:solutions (o/controlled-dfs Q
                                                 as
                                                 #(<= (count P) (count %))
                                                 #(set/superset? % P)))))))

;; due to the rule that singleton sets should have height zero
;; we have to be a bit tricky and find the minimal classes of non-singletons
;; this is done by doing surduction and find the maximum
(defn calc-heights
  [eqvcls subduction?]
  (let [nonsingl-eqvcls (remove #(t/singleton? (first %)) eqvcls)
        class-subduction? (fn [clA clB]
                            (subduction? (first clA) (first clB)))
        class-surduction? (p/inverse class-subduction?)
        sur-hd (p/cover-rel nonsingl-eqvcls class-surduction?)
        sub-hd (p/cover-rel nonsingl-eqvcls class-subduction?)
        minimals (filter #(empty? (sur-hd %)) nonsingl-eqvcls)
        height-tabs (map #(p/max-distances % sub-hd) minimals)]
    (into {} (map (fn [k] [k (inc (apply max (remove nil? (map
                                                           #(% k)
                                                           height-tabs))))])
                  (keys sur-hd)))))

(defn expand-set-keyed-map
  "Takes a map whose keys are sets and returns another map where each element
  of key set maps to the value of the original key."
  [m]
  (into {} (apply concat (for [k (keys m)]
                           (for [e k]
                             [e (m k)])))))

(defn skeleton
  "Creates a big map of holding all the skeleton information for the
  transformation semigroup generated by gens."
  [gens]
  (let [r-a-gens (o/right-actions t/act gens) ; right action generators
        subduction? (subduction-function r-a-gens)
        stateset (finite-set (t/transf-degree (first gens)))
        singletons (map hash-set stateset)
        images (o/bfs [stateset] (set-action r-a-gens))
        extd (into images singletons)
        c-g (o/cayley-graph images r-a-gens)
        sccs (o/scc images c-g)
        scc-heights (calc-heights sccs subduction?)
        scc-heights-full (conj scc-heights [(set singletons) 0])
        heights (expand-set-keyed-map scc-heights-full)]
    {:stateset stateset
     :singletons singletons
     :images images
     :extended extd
     :equivclasses sccs
     :heights heights
     :height (heights stateset)
     :subsethd (p/cover-rel extd set/superset?)
     :supsethd (p/cover-rel extd set/subset?)}))

(defn depth
  ([sk P] (inc (- (:height sk) ((:heights sk) P))))
  ([sk] (depth sk #{1}))) ;the depth of a singleton, we should have this one

(defn tile-chains
  [sk]
  (mapcat #(p/all-chains % (:supsethd sk)) (:singletons sk)))

(defn chain-act [chain t]
  (distinct (map #(t/act % t) chain)))

(defn height [sk P] ((:heights sk) P))

(defn positioned
  [sk tc]
  (let [height ((:heights sk) (:stateset sk))
        ptc (vec (map (fn [x] :*) (range height)))]
    (reduce #(assoc % ((:heights sk) %2)  %2) ptc tc)))

(defn display
  [skeleton]
  (println "#states" (count (:stateset skeleton)))
  (println "#images" (count (:images skeleton)))
  (println "#equivclasses" (count (:equivclasses skeleton)))
  (println "#extd" (count (:extended skeleton))))
